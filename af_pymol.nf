process PREPARE_INPUTS {
    output:
    path "BtCAI_fusion.fasta"
    path "sample.csv"

    script:
    """
    
    cat > sample.csv << EOF
sequence,fasta
BtCAI,"\$(realpath BtCAI_fusion.fasta)"
EOF
    """
// to add multiple sequences, add name + path using the format above
}

process RUN_PROTEINFOLD {
    input:
    path fasta_file from PREPARE_INPUTS.out.filter { it.name == 'BtCAI_fusion.fasta' }
    path csv_file from PREPARE_INPUTS.out.filter { it.name == 'sample.csv' }
    
    output:
    path "${params.proteinfold_outdir}"
    
    script:
    """
    nextflow pull nf-core/proteinfold -r 1.1.1
    
    nextflow run nf-core/proteinfold -r 1.1.1 \\
      --input ${csv_file} \\
      --mode alphafold2 \\
      --db_preset reduced_dbs \\
      --alphafold2_model_preset monomer \\
      --use_gpu true \\
      -profile docker \\
      --outdir ${params.proteinfold_outdir}
    """
}

process ALIGN_STRUCTURES {
    tag "$pdb_file.getName()"
    
    input:
    path pdb_file
    
    output:
    path "*.txt"

    script:
    """
    pymol -cq -d "
    load ${params.reference_pdb}, ref
    load ${pdb_file}, target
    align target, ref
    save alignment_${pdb_file.simpleName}.txt
    quit
    "
    """
}

workflow {
    PREPARE_INPUTS()

    RUN_PROTEINFOLD()
    
    // grab all pdb files generated by alphafold, rename them to pdbs
    Channel
      .fromPath("${params.proteinfold_outdir}/**/*.pdb")
      .set { pdbs }

    // structural alingment with pymol, output: .txt files 
    ALIGN_STRUCTURES(pdbs)
}
